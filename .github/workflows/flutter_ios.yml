
name: "[DEV] Build and Publish iOS"
on: workflow_dispatch

permissions:
    contents: read
    pages: write
    id-token: write


concurrency:
    cancel-in-progress: false
    group: 'ios'

jobs:
  build:
    runs-on: macos-latest
    environment: stage

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the Apple certificate and provisioning profile 
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          echo $SIGNING_CERTIFICATE_P12_DATA | base64 --decode > signingCertificate.p12
          security import signingCertificate.p12 \
            -f pkcs12 \
            -k build.keychain \
            -P $SIGNING_CERTIFICATE_PASSWORD \
            -T /usr/bin/codesig
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
        # Install flutter
      - name: Flutter get
        uses: subosito/flutter-action@v2
        with:
            channel: stable
            cache: true
            # optional parameters follow
            cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:" # change this to force refresh cache
            cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # change this to specify the cache path
            pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:-:hash:" # change this to force refresh cache of dart pub get dependencies
            pub-cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # change this to specify the cache path
      - run: flutter clean
      - run: flutter pub get
      - name: Write TMDB_KEY to .env
        run:
          set -o noclobber
          echo TMDB_KEY={{ secrets.TMDB_KEY }} >> .env
      - name: Create .env
        run: echo "TMDB_KEY=${{ secrets.TMDB_KEY }}" > .env
      - name: Make envfile
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_DEBUG: false
          envkey_TMDB_KEY: ${{ secrets.TMDB_KEY }}
          file_name: .env
      - run: flutter pub run build_runner build --delete-conflicting-outputs
      - run: flutter gen-l10n

      - name: Building IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist
      
        # Collect the file and upload as artifact         
      - name: collect ipa artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          # Path to the release files
          path: build/ios/ipa/*.ipa
