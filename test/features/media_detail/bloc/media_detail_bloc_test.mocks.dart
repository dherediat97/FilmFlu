// Mocks generated by Mockito 5.4.4 from annotations
// in film_flu/test/features/media_detail/bloc/media_detail_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:film_flu/app/types/result.dart' as _i3;
import 'package:film_flu/domain/models/credits_media_entity.dart' as _i8;
import 'package:film_flu/domain/models/media_item_entity.dart' as _i7;
import 'package:film_flu/domain/models/review_entity.dart' as _i10;
import 'package:film_flu/domain/repository_contracts/media_repository_contract.dart'
    as _i6;
import 'package:film_flu/presentation/features/home/bloc/home_bloc.dart' as _i9;
import 'package:film_flu/presentation/features/media_details/bloc/media_detail_bloc.dart'
    as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMediaDetailState_0 extends _i1.SmartFake
    implements _i2.MediaDetailState {
  _FakeMediaDetailState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_1<T> extends _i1.SmartFake implements _i3.Result<T> {
  _FakeResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MediaDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMediaDetailBloc extends _i1.Mock implements _i2.MediaDetailBloc {
  @override
  _i2.MediaDetailState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMediaDetailState_0(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeMediaDetailState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.MediaDetailState);

  @override
  _i4.Stream<_i2.MediaDetailState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.MediaDetailState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.MediaDetailState>.empty(),
      ) as _i4.Stream<_i2.MediaDetailState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void add(_i2.MediaDetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i2.MediaDetailEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.MediaDetailState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i2.MediaDetailEvent>(
    _i5.EventHandler<E, _i2.MediaDetailState>? handler, {
    _i5.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i5.Transition<_i2.MediaDetailEvent, _i2.MediaDetailState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void onChange(_i5.Change<_i2.MediaDetailState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MediaRepositoryContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockMediaRepositoryContract extends _i1.Mock
    implements _i6.MediaRepositoryContract {
  @override
  _i4.Future<_i3.Result<_i7.MediaItemEntity>> getMediaItem({
    required String? mediaTypeSelected,
    required String? mediaTypeId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMediaItem,
          [],
          {
            #mediaTypeSelected: mediaTypeSelected,
            #mediaTypeId: mediaTypeId,
          },
        ),
        returnValue: _i4.Future<_i3.Result<_i7.MediaItemEntity>>.value(
            _FakeResult_1<_i7.MediaItemEntity>(
          this,
          Invocation.method(
            #getMediaItem,
            [],
            {
              #mediaTypeSelected: mediaTypeSelected,
              #mediaTypeId: mediaTypeId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Result<_i7.MediaItemEntity>>.value(
                _FakeResult_1<_i7.MediaItemEntity>(
          this,
          Invocation.method(
            #getMediaItem,
            [],
            {
              #mediaTypeSelected: mediaTypeSelected,
              #mediaTypeId: mediaTypeId,
            },
          ),
        )),
      ) as _i4.Future<_i3.Result<_i7.MediaItemEntity>>);

  @override
  _i4.Future<_i3.Result<_i8.CreditsMediaEntity>> getCredits({
    required _i9.MediaType? mediaTypeSelected,
    required int? mediaTypeId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCredits,
          [],
          {
            #mediaTypeSelected: mediaTypeSelected,
            #mediaTypeId: mediaTypeId,
          },
        ),
        returnValue: _i4.Future<_i3.Result<_i8.CreditsMediaEntity>>.value(
            _FakeResult_1<_i8.CreditsMediaEntity>(
          this,
          Invocation.method(
            #getCredits,
            [],
            {
              #mediaTypeSelected: mediaTypeSelected,
              #mediaTypeId: mediaTypeId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Result<_i8.CreditsMediaEntity>>.value(
                _FakeResult_1<_i8.CreditsMediaEntity>(
          this,
          Invocation.method(
            #getCredits,
            [],
            {
              #mediaTypeSelected: mediaTypeSelected,
              #mediaTypeId: mediaTypeId,
            },
          ),
        )),
      ) as _i4.Future<_i3.Result<_i8.CreditsMediaEntity>>);

  @override
  _i4.Future<_i3.Result<List<_i10.ReviewEntity>?>> getReviews({
    required _i9.MediaType? mediaTypeSelected,
    required int? mediaTypeId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReviews,
          [],
          {
            #mediaTypeSelected: mediaTypeSelected,
            #mediaTypeId: mediaTypeId,
          },
        ),
        returnValue: _i4.Future<_i3.Result<List<_i10.ReviewEntity>?>>.value(
            _FakeResult_1<List<_i10.ReviewEntity>?>(
          this,
          Invocation.method(
            #getReviews,
            [],
            {
              #mediaTypeSelected: mediaTypeSelected,
              #mediaTypeId: mediaTypeId,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.Result<List<_i10.ReviewEntity>?>>.value(
                _FakeResult_1<List<_i10.ReviewEntity>?>(
          this,
          Invocation.method(
            #getReviews,
            [],
            {
              #mediaTypeSelected: mediaTypeSelected,
              #mediaTypeId: mediaTypeId,
            },
          ),
        )),
      ) as _i4.Future<_i3.Result<List<_i10.ReviewEntity>?>>);
}
